// -------------- INTRODUCTION ------------------------
//
// Rust is a fast, robust and concurrent programming language.
// This goals are achieved using a low number of standard libraries,
// and trough the absence of any garbage collector mechanism or assumption
// on the system executor.
// (THEY TRY TO KEEP ESSENTIALLY C COMPATIBILITY)
//
// Rust is strongly typed and so adapt to be used in system programming.
// Each type is known at compilation time.
// A powerful inference engine is used to validate type properties.
// Allows the programmers to be fully in control of the content of the memory while optimizing the
// generated code.
//
//
//--------------- HISTORY -------------------------
//
// Rust project is started in 2006 as hobby of Graydon Hoare, a software engineer working at
// Mozilla Research at that time. In 2009 he got a sponsorship from Mozilla and then it become an
// open source project.
// In 2015 Rust 1.0 was released.
// Every 6 weeks a release was published.
//
// Today Rust is taking over the software industry in many fields.
// Firefox browser contains 3M lines of code making Rust the 9% of the code in the browser.
// Dropbox largely uses Rust.
// npm uses Rust.
// deno is written in Rust.
// Amazon web services uses Rust.
//
// Although Rust is used by industries is also appreciated by many developers, infact
// it has grown in popularity more than many other big projects in GitHub it started at 0 stars in
// 2010 and reached 55k stars in 2021.
//
//
// -------------- FEATURES -------------------------
//
// - Safe, it is free of undefined behavious.
// - Concurrent, allows to write safely code that runs in multiple threads.
// - Handful, it does what you write while providing a decent level of abstraction at 0 cost in
// terms of size of the program.
// - Developer friendly, it allows to boost productivity of developers by providing a nice
// ecosystem for importing dependencies, code inference and testing (Cargo does this).
//
// Comparing Rust with other languages results in being one of the best languages for security and
// performance.
//
// -------------- SECURITY -------------------------
//
// The validation system for types at compile time inibits to produce unsafe code (with the
// exception of using the unsafe keyword to specify that the code in the block has not to be
// checked).
//
// This prevents from many common mistakes in others languages, that otherwise are hard to catch
// like:
//
// - Dangling pointers
// - Double free
// - Critical runs
// - Buffer overflow
// - Invalid iterators
// - Arithmethic overflow
//
// -------------- PERFORMANCE ----------------------
//
// The Rust compiler (rustc) optimizes the generated code aggressively shirinking the size and the
// execution time.
// The language itself provides powerful simple structures that being used more than complex ones
// based on pointers that have sparse allocation in memory indirectly favours the cache usage.
// The invocation policy is based on static addresses.
// The presence of an integrated ecosystem (cargo) allows to use existent and safe code from internet registries for many common problems.
//
// With many good things comes the cost of learning the language.
// Many features of rust are simple but his complexity grows exponentially on niche problems.
// 
// A COOL MEME ABOUT LEARNING RUST:
// "cool, rustup!"
// "cannot borrow immutable borrowed content as mutable"
// "the heck is a Cow<> brb learning Haskell"
// "nevermind"
// "oh I get it Result<T,E> is a monad!"
// "wait async/await is a thing now?"
// "*publishes executor crate*"
// "screen long generic type signature"
// "but it *is* sync"
// "ooh, can I use io_uring"
// 
// ------------- DEFINITIONS -------------------------
//
// As other languages do Rust has it's own definitions for code architecture:
//
// - CRATE, is a unit of code that compiled generates an executable or a library.
// It can contain reference to other source files.
//
// - CRATE ROOT, the entry point of a crate tipically located at src/main.rs.
//
// - MODULE, a virtual method to divide logic inside a crate naming groups of lines or files that
// do assolve the same scope. A module can contain type definitions, functions and other modules.
// A sub-module is a module that exists within another module inside the parent file or in a sub
// folder of the same path. Modules although are a pure logical abstraction and when they are
// compiled they do not have different results, is one fails the entire crate doesn't compile.
//
// - PACKAGE, a collection of one or multiple crates that aim to reach a certain functionality (a
// project).
// A package is hosted in the upper directory generated by cargo and contains a file named
// "Cargo.toml" that specifies dependencies and how crates are located within it.
// A package even if can contain multiple crates can contain only a single library.
// If multiple crates in it are binaries they have to be located in "src/bin/".
//
//
// ------------ PROJECT/PACKAGE STRUCTURE -------------
// 
// STRUCTURE OF AN EXECUTABLE PROJECT
//
// MyPackage
//    |
//    |
//    |--> src
//    |    |
//    |    |--> main.rs  ! This is the crate root
//    |    |
//    |    |--> my_module ! A module
//    |    |    |
//    |    |    |--> mod.rs ! The entry file for a module
//    |    |    |
//    |    |    |--> inner_mod.rs ! A sub-module
//    |    |
//    |    |--> other_mod.rs ! Another module presented as a single file
//    |
//    |--> Cargo.toml ! The file that describes the package structure
//
//
//
// STRUCTURE OF A LIBRARY PROJECT
// 
// MyPackage
//    |
//    |
//    |--> src
//    |    |
//    |    |--> lib.rs  ! This is the crate root
//    |    |
//    |    |--> my_module ! A module
//    |    |    |
//    |    |    |--> mod.rs ! The entry file for a module
//    |    |    |
//    |    |    |--> inner_mod.rs ! A sub-module
//    |    |
//    |    |--> other_mod.rs ! Another module presented as a single file
//    |
//    |--> Cargo.toml ! The file that describes the package structure
//
//
// STRUCTURE OF PROJECT WITH MULTIPLE EXECUTABLES
//
// MyPackage
//    |
//    |
//    |--> src
//    |    |
//    |    |--> main.rs  ! This is the crate root and contains the first executable code
//    |    |
//    |    |--> bin
//    |    |    |
//    |    |    |--> second.rs ! This contains the code for the second executable
//    |    |    |
//    |    |    |--> third.rs ! This contains the code for the third executable
//    |    |
//    |    |--> some_mod.rs ! Contains a module that can be used from any of the code for the
//    different executables
//    |
//    |--> Cargo.toml ! The file that describes the package structure
//
//
// -------------- INSTALLATION -------------------------------
//
// The installer for Rust is available on every major os family such as Windows, MacOs and Linux.
// The installer is called "rustup" and installs the compiler and execution environment for Rust.
// Rustup is available at "https://www.rust-lang.org/tools/install".
// Is also available an online playground at "https://play.rust-lang.org".
// Since as described in previous sections Rust updates his version every 6 weeks is possible to
// update the current installation with "rustup update".
// The mainly useful commands available after the installation are:
// rustc - the compiler
// cargo - the package manager
//
// 
// -------------- BASIC TIPS -------------------------------
//
// "fn main() {}" is the first function invoked at the start of every program written in Rust.
// "print!()","println!()" are the macros to print to the console in Rust.
// "let a = 0;" let is the keyword to declare a variable in Rust.
//
// -------------- RESOURCES --------------------------------
//
// The are plenty of resources to learn Rust on the internet, some of the professor suggestions
// are:
//
// - Tour of Rust - https://tourofrust.com/
// - Rust in Easy English - https://dhghomon.github.io/easy_rust/
// - Rust Language Cheat Sheet - https://cheats.rs/#the-abstract-machine
// - Rust By Example - https://doc.rust-lang.org/stable/rust-by-example/
// - Rust Cookbook - https://rust-lang-nursery.github.io/rust-cookbook/
// - The Book - https://doc.rust-lang.org/book/
// - The Rust Reference - https://doc.rust-lang.org/stable/reference/
// - Rust-learning - https://github.com/ctjhoa/rust-learning
// - The Little Book of Rust Books - https://lborb.github.io/book/
// - Rust Books - https://github.com/sger/RustBooks
//
// Another way for learing advanced Rust is to lookup for industrial projects that have published
// their source code:
//
// - Amazon Firecracker Micro-VM
// https://github.com/firecracker-microvm/firecracker
//
// - Redox Operating System
// https://gitlab.redox-os.org/redox-os/redox/
//
// - Writing a OS in Rust (blog)
// https://os.phil-opp.com/
//
// - Bevy (simple data-driven game engine)
// https://github.com/bevyengine/bevy
//
// - SWC (Speedy Web Compiler)
// https://github.com/swc-project/swc
//
// Also learn means work actively so a link to a possible source of jobs that involve working with
// Rust:
//
// https://rustjobs.dev/

